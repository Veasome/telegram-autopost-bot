import os
import sqlite3
import threading
import time
from datetime import datetime, timedelta
import telebot
from telebot import types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID', '@severitynotfound')
ADMIN_ID = int(os.getenv('ADMIN_ID', '469085521'))

bot = telebot.TeleBot(BOT_TOKEN)

print("üî• –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –ë–û–¢–ê –° –ú–ï–î–ò–ê –ò –ú–ï–ù–Æ!")


# –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
def start_simple_server():
    try:
        from http.server import HTTPServer, BaseHTTPRequestHandler

        class SimpleHandler(BaseHTTPRequestHandler):

            def do_GET(self):
                self.send_response(200)
                self.send_header('Content-type', 'text/plain; charset=utf-8')
                self.end_headers()
                self.wfile.write('ü§ñ Bot is alive and running!'.encode('utf-8'))

            def log_message(self, format, *args):
                pass

        server = HTTPServer(('0.0.0.0', 5000), SimpleHandler)
        print("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
        server.serve_forever()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('posts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT,
            media_type TEXT,
            media_file_id TEXT,
            time DATETIME NOT NULL,
            status TEXT DEFAULT 'scheduled'
        )
    ''')
    conn.commit()
    conn.close()


def save_post(text, post_time, media_type=None, media_file_id=None):
    conn = sqlite3.connect('posts.db')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO posts (text, time, media_type, media_file_id) VALUES (?, ?, ?, ?)',
        (text, post_time, media_type, media_file_id))
    post_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return post_id


def get_posts(status=None):
    conn = sqlite3.connect('posts.db')
    cursor = conn.cursor()
    if status:
        cursor.execute('SELECT * FROM posts WHERE status = ? ORDER BY time',
                       (status, ))
    else:
        cursor.execute('SELECT * FROM posts ORDER BY time')
    posts = cursor.fetchall()
    conn.close()
    return posts


def delete_post(post_id):
    conn = sqlite3.connect('posts.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM posts WHERE id = ?', (post_id, ))
    conn.commit()
    conn.close()


# –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
def parse_time(time_str):
    try:
        time_str = time_str.strip().lower()
        now = datetime.now()

        if time_str.startswith('+'):
            if time_str.endswith('h'):
                hours = int(time_str[1:-1])
                return now + timedelta(hours=hours)
            elif time_str.endswith('d'):
                days = int(time_str[1:-1])
                return now + timedelta(days=days)
            else:
                minutes = int(time_str[1:])
                return now + timedelta(minutes=minutes)
        else:
            if ' ' in time_str:
                time_part, date_part = time_str.split(' ', 1)
                time_obj = datetime.strptime(time_part, '%H:%M').time()
                date_obj = datetime.strptime(date_part, '%d.%m.%Y').date()
                return datetime.combine(date_obj, time_obj)
            else:
                time_obj = datetime.strptime(time_str, '%H:%M').time()
                scheduled = datetime.combine(now.date(), time_obj)
                if scheduled <= now:
                    scheduled += timedelta(days=1)
                return scheduled
    except:
        raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")


# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤
def start_scheduler():

    def check_posts():
        while True:
            conn = sqlite3.connect('posts.db')
            cursor = conn.cursor()
            cursor.execute(
                'SELECT id, text, media_type, media_file_id FROM posts WHERE status = "scheduled" AND time <= ?',
                (datetime.now(), ))

            for post_id, text, media_type, media_file_id in cursor.fetchall():
                try:
                    if media_type == 'photo':
                        bot.send_photo(CHANNEL_ID, media_file_id, caption=text)
                    elif media_type == 'video':
                        bot.send_video(CHANNEL_ID, media_file_id, caption=text)
                    else:
                        bot.send_message(CHANNEL_ID, text)

                    cursor.execute(
                        'UPDATE posts SET status = "sent" WHERE id = ?',
                        (post_id, ))
                    conn.commit()
                    bot.send_message(ADMIN_ID,
                                     f'‚úÖ –ü–æ—Å—Ç #{post_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!')
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}')

            conn.close()
            time.sleep(30)

    thread = threading.Thread(target=check_posts, daemon=True)
    thread.start()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üìÖ –ù–æ–≤—ã–π –ø–æ—Å—Ç')
    btn2 = types.KeyboardButton('üñºÔ∏è –ü–æ—Å—Ç —Å –º–µ–¥–∏–∞')
    btn3 = types.KeyboardButton('üìã –ú–æ–∏ –ø–æ—Å—Ç—ã')
    btn4 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn5 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç')
    btn6 = types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')

    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5, btn6)
    return markup


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'menu'])
def start_command(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
        return

    print(f"üîÑ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")

    bot.send_message(message.chat.id, f'üëã –ü–†–ò–í–ï–¢! –≠–¢–û –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –ë–û–¢–ê!\n\n'
                     f'–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ-–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ {CHANNEL_ID}\n\n'
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                     reply_markup=main_menu())


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.from_user.id != ADMIN_ID:
        return

    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

    text = message.text

    if text == 'üìÖ –ù–æ–≤—ã–π –ø–æ—Å—Ç':
        user_data[message.chat.id] = {'step': 'waiting_time'}
        bot.send_message(
            message.chat.id, 'üïí *–ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç?*\n\n'
            '*–ü—Ä–∏–º–µ—Ä—ã:*\n‚Ä¢ +10 - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n‚Ä¢ +1h - —á–µ—Ä–µ–∑ 1 —á–∞—Å\n‚Ä¢ 18:00 - —Å–µ–≥–æ–¥–Ω—è –≤ 18:00\n‚Ä¢ 14:30 25.12.2024 - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:',
            parse_mode='Markdown',
            reply_markup=types.ReplyKeyboardRemove())

    elif text == 'üñºÔ∏è –ü–æ—Å—Ç —Å –º–µ–¥–∏–∞':
        user_data[message.chat.id] = {'step': 'waiting_media'}
        bot.send_message(message.chat.id,
                         'üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞',
                         reply_markup=types.ReplyKeyboardRemove())

    elif text == 'üìã –ú–æ–∏ –ø–æ—Å—Ç—ã':
        posts = get_posts('scheduled')
        if not posts:
            bot.send_message(message.chat.id,
                             'üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤',
                             reply_markup=main_menu())
            return

        response = 'üìã *–í–∞—à–∏ –ø–æ—Å—Ç—ã:*\n\n'
        for post in posts:
            time_str = datetime.strptime(
                post[4], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
            media_icon = "üì∑" if post[
                2] == 'photo' else "üé•" if post[2] == 'video' else "üìù"
            post_text = post[1][:50] + "..." if post[1] else "–ú–µ–¥–∏–∞-–ø–æ—Å—Ç"
            response += f'{media_icon} #{post[0]} - {time_str}\n{post_text}\n\n'

        bot.send_message(message.chat.id,
                         response,
                         parse_mode='Markdown',
                         reply_markup=main_menu())

    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        posts = get_posts()
        scheduled = len([p for p in posts if p[5] == 'scheduled'])
        sent = len([p for p in posts if p[5] == 'sent'])

        bot.send_message(
            message.chat.id,
            f'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}\n‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {scheduled}\n‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {sent}',
            parse_mode='Markdown',
            reply_markup=main_menu())

    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç':
        posts = get_posts('scheduled')
        if not posts:
            bot.send_message(message.chat.id,
                             '‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
                             reply_markup=main_menu())
            return

        markup = types.InlineKeyboardMarkup()
        for post in posts:
            time_str = datetime.strptime(
                post[4], '%Y-%m-%d %H:%M:%S').strftime('%d.%m %H:%M')
            markup.add(
                types.InlineKeyboardButton(f'‚ùå #{post[0]} - {time_str}',
                                           callback_data=f'delete_{post[0]}'))

        bot.send_message(message.chat.id,
                         'üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                         reply_markup=markup)

    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        bot.send_message(
            message.chat.id, '‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n'
            '*–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:*\n‚Ä¢ +10 - —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç\n‚Ä¢ +1h - —á–µ—Ä–µ–∑ 1 —á–∞—Å\n‚Ä¢ 18:00 - —Å–µ–≥–æ–¥–Ω—è –≤ 18:00\n\n'
            '*–ú–µ–¥–∏–∞-–ø–æ—Å—Ç—ã:*\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—â–µ–π –∫–Ω–æ–ø–∫–∏',
            parse_mode='Markdown',
            reply_markup=main_menu())

    else:
        chat_id = message.chat.id
        if chat_id in user_data:
            step = user_data[chat_id]['step']

            if step == 'waiting_time':
                try:
                    post_time = parse_time(text)
                    user_data[chat_id] = {
                        'step': 'waiting_text',
                        'time': post_time,
                        'media_type': user_data[chat_id].get('media_type'),
                        'media_file_id':
                        user_data[chat_id].get('media_file_id')
                    }
                    bot.send_message(
                        chat_id,
                        f'üïí –í—Ä–µ–º—è: {post_time.strftime("%d.%m.%Y %H:%M")}\n\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:'
                    )
                except:
                    bot.send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏')

            elif step == 'waiting_text':
                post_time = user_data[chat_id]['time']
                media_type = user_data[chat_id].get('media_type')
                media_file_id = user_data[chat_id].get('media_file_id')

                post_id = save_post(text, post_time, media_type, media_file_id)
                del user_data[chat_id]

                media_info = " —Å –º–µ–¥–∏–∞" if media_type else ""
                bot.send_message(
                    chat_id,
                    f'‚úÖ –ü–æ—Å—Ç{media_info} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n\nüÜî ID: #{post_id}\nüïí –í—Ä–µ–º—è: {post_time.strftime("%d.%m.%Y %H:%M")}',
                    reply_markup=main_menu())
        else:
            bot.send_message(chat_id,
                             '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:',
                             reply_markup=main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
@bot.message_handler(content_types=['photo', 'video'])
def handle_media(message):
    if message.from_user.id != ADMIN_ID:
        return

    chat_id = message.chat.id

    if chat_id in user_data and user_data[chat_id]['step'] == 'waiting_media':
        if message.photo:
            file_id = message.photo[-1].file_id
            user_data[chat_id] = {
                'step': 'waiting_time',
                'media_type': 'photo',
                'media_file_id': file_id
            }
            media_type = "üì∑ –§–æ—Ç–æ"
        elif message.video:
            file_id = message.video.file_id
            user_data[chat_id] = {
                'step': 'waiting_time',
                'media_type': 'video',
                'media_file_id': file_id
            }
            media_type = "üé• –í–∏–¥–µ–æ"

        bot.send_message(
            chat_id,
            f'‚úÖ {media_type} –ø–æ–ª—É—á–µ–Ω–æ!\n\nüïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:')
    else:
        bot.send_message(chat_id,
                         '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ "üñºÔ∏è –ü–æ—Å—Ç —Å –º–µ–¥–∏–∞"',
                         reply_markup=main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith('delete_'):
        post_id = call.data.split('_')[1]
        delete_post(post_id)
        bot.answer_callback_query(call.id, '‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω')
        bot.edit_message_text('‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω', call.message.chat.id,
                              call.message.message_id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("=" * 50)
    print("üöÄ –ó–ê–ü–£–°–ö –ù–û–í–û–ô –í–ï–†–°–ò–ò –ë–û–¢–ê!")
    print("=" * 50)

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    try:
        web_thread = threading.Thread(target=start_simple_server, daemon=True)
        web_thread.start()
        time.sleep(1)
        print("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

    init_db()
    start_scheduler()

    print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    print("üì± –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
